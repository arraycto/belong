package com.belong.service.gen.controller;

import com.belong.common.core.base.BaseController;
import com.belong.common.core.base.ResponseVO;
import com.belong.common.core.page.PageDataInfo;
import com.belong.common.exception.base.PageException;
import com.belong.common.exception.wxapplet.parameter.WxAppletParameterLossException;
import com.belong.common.util.ServletUtils;
import com.belong.common.util.StringUtils;
import com.codingapi.txlcn.tc.annotation.LcnTransaction;
import org.springframework.transaction.annotation.Transactional;
import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import lombok.AllArgsConstructor;
import ${package}.domain.${className}DO;
import ${package}.dto.${className}DTO;
import ${package}.service.I${className}Service;
import ${package}.vo.${className}ListVO;
import ${package}.vo.${className}VO;


/**
 * @Description:     ${comments}
 * @Author:          ${author}
 * @CreateDate:      ${datetime}
 * @UpdateDate:      ${datetime}
 * @Version: 1.0
 */
@Api(tags = "${tableComments}")
@RestController
@AllArgsConstructor
@RequestMapping("/v1/db//${classname}")
@Slf4j
public class ${className}Controller extends BaseController {
    @Autowired
    private final I${className}Service ${classname}Service;


    @ApiOperation(value = "获取分页数据", notes = "权限标识 sys:${classname}:view")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", dataType = "Integer", paramType = "query"),
            @ApiImplicitParam(name = "pageSize", value = "条数", dataType = "Integer", paramType = "query")
    })
    ##@PreAuthorize("hasAuthority('sys:${classname}:view')")
    @GetMapping(value = "/list")
    public ResponseVO<PageDataInfo<${className}ListVO>> list() throws PageException{
        Long pageNum = ServletUtils.getParameterToLong("pageNum");
        Long pageSize = ServletUtils.getParameterToLong("pageSize");
        if (StringUtils.isNull(pageNum) || StringUtils.isNull(pageSize)) {
            throw new PageException("请填写分页参数！");
        }
        return ResponseVO.ok(Ipage2PageDataInfo(${classname}Service.select${classname}DOList(startPage(pageNum, pageSize), new QueryWrapper<${classname}DO>().orderByDesc("create_date")), ${classname}ListVO.class));
    }

    @LcnTransaction(propagation = DTXPropagation.SUPPORTS)
    @Transactional(readOnly = false)
    @ApiOperation(value = "保存或修改数据", notes = "权限标识 sys:${classname}:edit")
    @PostMapping(value = "/saveOrUpdate")
    ##@PreAuthorize("hasAuthority('sys:${classname}:edit')")
    public ResponseVO saveOrUpdate(@RequestBody ${className}VO ${classname}VO) {
            ${className}DO ${classname}DO = generator.convert(${classname}VO, ${className}DO.class);
        if (${classname}Service.saveOrUpdate(${classname}DO)) {
            return ResponseVO.ok();
        }
        return ResponseVO.failed();

    }

    @ApiOperation(value = "根据ID获取详情", notes = "权限标识 sys:${classname}:view")
    ##@PreAuthorize("hasAuthority('sys:${classname}:view')")
    @GetMapping(value = "/get/{id}")
    public ResponseVO<${className}VO> get(@ApiParam(required = true, value = "id") @PathVariable("id") String id) {
        if (StringUtils.isEmpty(id)) {
            throw new WxAppletParameterLossException(new String[]{"id"});
        }
        return ResponseVO.ok(generator.convert(${classname}Service.getById(id), ${className}VO.class));
    }

    @LcnTransaction(propagation = DTXPropagation.SUPPORTS)
    @Transactional(readOnly = false)
    @ApiOperation(value = "根据ID删除数据", notes = "权限标识 sys:${classname}:remove")
    ##@PreAuthorize("hasAuthority('sys:${classname}:remove')")
    @GetMapping(value = "/remove/{id}")
    public ResponseVO remove(@ApiParam(required = true, value = "id") @PathVariable("id") String id) {
        if (${classname}Service.removeById(id)) {
            return ResponseVO.ok();
        }
        return ResponseVO.failed();
    }
}
